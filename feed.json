{
    "version": "https://jsonfeed.org/version/1",
    "title": "zpl.blog",
    "home_page_url": "https://blog.zpl.pw/",
    "feed_url": "https://blog.zpl.pw/feed.json",
    "description": "Pushing the boundaries of simplicity.",
    "icon": "https://blog.zpl.pw/apple-touch-icon.png",
    "favicon": "https://blog.zpl.pw/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "zpl",
        "url": null,
    },
    
"items": [
    
        {
            "id": "https://blog.zpl.pw/2022/06/09/2021-01-05-new-year-plans",
            "title": null,
            "summary": null,
            "content_text": "Hi there!First of all we’d like to wish you a lot of luck in this new year!We’ve prepared the following roadmap for the upcoming months:We will try to improve and extend the support of various architectures (namely the ARM family) and platforms (iOS, Android, Emscripten, …) in the zpl library. There is a long journey ahead of us, but hopefully a fun one!Our enet fork will receive an upgrade in the deployment process, patches and CI setup similar to the one used in zpl.Enet will be (once more) completely reorganised to improve the development workflow, akin to how we currently organise librg or zpl.Releases will always provide the expected amalgamated single-header version of the library however.We will keep you updated on any changes or progress during the development, thank you for supporting us!",
            "content_html": "<p>Hi there!</p><p>First of all we’d like to wish you a lot of luck in this new year!</p><p>We’ve prepared the following roadmap for the upcoming months:</p><p>We will try to improve and extend the support of various architectures (namely the <strong>ARM family</strong>) and platforms (iOS, Android, Emscripten, …) in the <strong>zpl</strong> library. There is a long journey ahead of us, but hopefully a fun one!</p><p>Our <strong>enet</strong> fork will receive an upgrade in the deployment process, patches and CI setup similar to the one used in zpl.</p><p><strong>Enet</strong> will be (once more) completely reorganised to improve the development workflow, akin to how we currently organise <strong>librg</strong> or <strong>zpl</strong>.Releases will always provide the expected amalgamated single-header version of the library however.</p><p>We will keep you updated on any changes or progress during the development, thank you for supporting us!</p>",
            "url": "https://blog.zpl.pw/2022/06/09/2021-01-05-new-year-plans",
            
            
            
            
            
            "date_published": "2022-06-09T17:39:13+02:00",
            "date_modified": "2022-06-09T17:39:13+02:00",
            
                "author":  {
                "name": "zpl",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://blog.zpl.pw/2021/04/22/abstract-data-tree",
            "title": "Abstract Data Tree",
            "summary": "ADT builder allows us to construct data structure trees that are format-agnostic and flexible. `zpl_adt_node` contains enough information to cover all parser needs, ensuring that we can export this data into any format zpl supports.",
            "content_text": "The 13.1.0 release of zpl has arrived and we have some news to share!We have primarily focused on rewriting our JSON5 module, which allows us to integrate new parsers more easily! Let’s get into major changes:The manual builderADT builder allows us to construct data structure trees that are format-agnostic and flexible. zpl_adt_node contains enough information to cover all parser needs, ensuring that we can export this data into any format zpl supports.We have also developed a few helper methods to make data layout design easier to work with, namely:  zpl_adt_inset(parent, name, value) that appends a new node into provided parent branch,  or zpl_adt_set(node, name, value) that sets up our existing node with a value.We have extracted a few methods from the former JSON5 parser as well:  zpl_adt_parse_number(node, text) parses the text and populates the node with a full number analysis,  and zpl_adt_str_to_flt(node) that does the same thing, but relies on existing string node data to analyze the number.JSON5/SJSON parserThe primary reason behind the JSON5 refactor was to reduce code complexity and put reusable components into a shared module all parsers would benefit from.We have reworked the parser from the ground up to benefit from the new ADT builder API. The code has been reduced substantially, and it is much easier to follow the flow now.The constant data type has also been removed in favor of number-based constant values we’ve already used for Infinity or NaN.CSV parserA new addition to the parser (now a) family is the CSV support! It follows the RFC 4180 standard and supports various commonly used features, such as string literals, headers, or custom delimiters.The data layout in ADT is simple. Per each column, we create an array node holding cells of a respective row. The following CSV data:foo, bar, baz1,   2,   34,   5,   6will be represented in memory as:root = {  foo = [1, 4],  bar = [2, 5],  baz = [3, 6]}or, if we import a header-less CSV collection, it would be an array of arrays:root = [  [1, 4],  [2, 5],  [3, 6]]String literalsThe CSV parser also supports string literals with escaped double-quotes. The following CSV data is valid:name, occupationJim Halpert, Salesman\"Michael Scott\", Regional Manager\"Dwight \"\"Danger?\"\" Schrute\", \"Assistant (to the) Regional Manager\"The list of names would be populated as follows: Jim Halpert, Michael Scott, Dwight \"Danger?\" Schrute.Build once, transform anywhere!We can build our own data tree with the features above and export it to any format we desire (as long as zpl supports it).Say we import the CSV collection from above:foo, bar, baz1,   2,   34,   5,   6The same data can be directly exported into JSON5:{  \"foo\": [1, 4],  \"bar\": [2, 5],  \"baz\": [3, 6]}and vice versa!This opens up a lot of opportunities, like building custom native low-level data pipelines for ETL and transformations.PlansWe plan to add support for more languages over time. The YAML and TOML languages are the ones we will focus on shortly. However, we’re open to any suggestions or contributions to enhance our little parser library.Thanks for reading!",
            "content_html": "<p>The <strong>13.1.0</strong> release of <a href=\"http://zpl.pw\">zpl</a> has arrived and we have some news to share!We have primarily focused on rewriting our JSON5 module, which allows us to integrate new parsers more easily! Let’s get into major changes:</p><h2 id=\"the-manual-builder\">The manual builder</h2><p>ADT builder allows us to construct data structure trees that are format-agnostic and flexible. <code class=\"language-plaintext highlighter-rouge\">zpl_adt_node</code> contains enough information to cover all parser needs, ensuring that we can export this data into any format zpl supports.</p><p>We have also developed a few helper methods to make data layout design easier to work with, namely:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">zpl_adt_inset(parent, name, value)</code> that appends a new node into provided <code class=\"language-plaintext highlighter-rouge\">parent</code> branch,</li>  <li>or <code class=\"language-plaintext highlighter-rouge\">zpl_adt_set(node, name, value)</code> that sets up our existing node with a value.</li></ul><p>We have extracted a few methods from the former JSON5 parser as well:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">zpl_adt_parse_number(node, text)</code> parses the text and populates the node with a full number analysis,</li>  <li>and <code class=\"language-plaintext highlighter-rouge\">zpl_adt_str_to_flt(node)</code> that does the same thing, but relies on existing <em>string</em> node data to analyze the number.</li></ul><h2 id=\"json5sjson-parser\">JSON5/SJSON parser</h2><p>The primary reason behind the JSON5 refactor was to reduce code complexity and put reusable components into a shared module all parsers would benefit from.</p><p>We have reworked the parser from the ground up to benefit from the new ADT builder API. The code has been reduced substantially, and it is much easier to follow the flow now.</p><p>The constant data type has also been removed in favor of number-based constant values we’ve already used for <code class=\"language-plaintext highlighter-rouge\">Infinity</code> or <code class=\"language-plaintext highlighter-rouge\">NaN</code>.</p><h2 id=\"csv-parser\">CSV parser</h2><p>A new addition to the parser (now a) family is the CSV support! It follows the <code class=\"language-plaintext highlighter-rouge\">RFC 4180</code> standard and supports various commonly used features, such as string literals, headers, or custom delimiters.</p><p>The data layout in ADT is simple. Per each column, we create an array node holding cells of a respective row. The following CSV data:</p><pre><code class=\"language-csv\">foo, bar, baz1,   2,   34,   5,   6</code></pre><p>will be represented in memory as:</p><div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>  <span class=\"nx\">baz</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"p\">}</span></code></pre></div></div><p>or, if we import a header-less CSV collection, it would be an array of arrays:</p><div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"p\">[</span>  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"p\">]</span></code></pre></div></div><h3 id=\"string-literals\">String literals</h3><p>The CSV parser also supports string literals with escaped double-quotes. The following CSV data is valid:</p><pre><code class=\"language-csv\">name, occupationJim Halpert, Salesman\"Michael Scott\", Regional Manager\"Dwight \"\"Danger?\"\" Schrute\", \"Assistant (to the) Regional Manager\"</code></pre><p>The list of names would be populated as follows: <code class=\"language-plaintext highlighter-rouge\">Jim Halpert</code>, <code class=\"language-plaintext highlighter-rouge\">Michael Scott</code>, <code class=\"language-plaintext highlighter-rouge\">Dwight \"Danger?\" Schrute</code>.</p><h2 id=\"build-once-transform-anywhere\">Build once, transform anywhere!</h2><p>We can build our own data tree with the features above and export it to any format we desire (as long as zpl supports it).</p><p>Say we import the CSV collection from above:</p><pre><code class=\"language-csv\">foo, bar, baz1,   2,   34,   5,   6</code></pre><p>The same data can be directly exported into JSON5:</p><div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"nl\">\"foo\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\">  </span><span class=\"nl\">\"bar\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"w\">  </span><span class=\"nl\">\"baz\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div></div><p>and vice versa!</p><p>This opens up a lot of opportunities, like building custom native low-level data pipelines for ETL and transformations.</p><h2 id=\"plans\">Plans</h2><p>We plan to add support for more languages over time. The <strong>YAML</strong> and <strong>TOML</strong> languages are the ones we will focus on shortly. However, we’re open to any suggestions or contributions to enhance our little parser library.</p><p>Thanks for reading!</p>",
            "url": "https://blog.zpl.pw/2021/04/22/abstract-data-tree",
            
            
            
            
            
            "date_published": "2021-04-22T00:00:00+02:00",
            "date_modified": "2021-04-22T00:00:00+02:00",
            
                "author":  {
                "name": "zpl",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://blog.zpl.pw/2014/05/12/css-hacks-you-may-not-know",
            "title": "CSS hacks you may not know",
            "summary": "This is a collection of short CSS snippets I thought might be useful for beginners",
            "content_text": "Lorem ipsum dolor amet tousled viral art party blue bottle single-origin coffee cardigan, selvage man braid helvetica. Banh mi taxidermy meditation microdosing. Selvage cornhole YOLO, small batch vexillologist raclette VHS prism sustainable 8-bit ugh semiotics letterpress disrupt pop-up. Celiac shabby chic ugh, jianbing whatever kitsch tattooed edison bulb kogi irony etsy.Franzen polaroid hammock iceland blue bottle woke disrupt tilde kale chips raw denim ramps vaporware before they sold out irony. Narwhal vaporware offal shaman celiac kinfolk activated charcoal salvia lomo irony readymade normcore. Yr activated charcoal kombucha, man braid whatever biodiesel hella crucifix adaptogen bicycle rights small batch skateboard mixtape. Hot chicken sustainable green juice 90’s. Ennui kickstarter hella pug, meggings man bun shaman messenger bag. Chambray adaptogen kombucha pug affogato, kogi green juice distillery ugh banh mi.int main (){\tint hello = 3;\tchar world = 'w';}Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.import java.util.Scanner;  // Import the Scanner classclass Main {  public static void main(String[] args) {    Scanner myObj = new Scanner(System.in);  // Create a Scanner object    System.out.println(\"Enter username\");    String userName = myObj.nextLine();  // Read user input    System.out.println(\"Username is: \" + userName);  // Output user input  }}Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.",
            "content_html": "<p>Lorem ipsum dolor amet tousled viral art party blue bottle single-origin coffee cardigan, selvage man braid helvetica. Banh mi taxidermy meditation microdosing. Selvage cornhole YOLO, small batch vexillologist raclette VHS prism sustainable 8-bit ugh semiotics letterpress disrupt pop-up. Celiac shabby chic ugh, jianbing whatever kitsch tattooed edison bulb kogi irony etsy.</p><p>Franzen polaroid hammock iceland blue bottle woke disrupt tilde kale chips raw denim ramps vaporware before they sold out irony. Narwhal vaporware offal shaman celiac kinfolk activated charcoal salvia lomo irony readymade normcore. Yr activated charcoal kombucha, man braid whatever biodiesel hella crucifix adaptogen bicycle rights small batch skateboard mixtape. Hot chicken sustainable green juice 90’s. Ennui kickstarter hella pug, meggings man bun shaman messenger bag. Chambray adaptogen kombucha pug affogato, kogi green juice distillery ugh banh mi.</p><div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(){</span>\t<span class=\"kt\">int</span> <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\t<span class=\"kt\">char</span> <span class=\"n\">world</span> <span class=\"o\">=</span> <span class=\"sc\">'w'</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.util.Scanner</span><span class=\"o\">;</span>  <span class=\"c1\">// Import the Scanner class</span><span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>    <span class=\"nc\">Scanner</span> <span class=\"n\">myObj</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Scanner</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">);</span>  <span class=\"c1\">// Create a Scanner object</span>    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Enter username\"</span><span class=\"o\">);</span>    <span class=\"nc\">String</span> <span class=\"n\">userName</span> <span class=\"o\">=</span> <span class=\"n\">myObj</span><span class=\"o\">.</span><span class=\"na\">nextLine</span><span class=\"o\">();</span>  <span class=\"c1\">// Read user input</span>    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Username is: \"</span> <span class=\"o\">+</span> <span class=\"n\">userName</span><span class=\"o\">);</span>  <span class=\"c1\">// Output user input</span>  <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div><p>Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.</p>",
            "url": "https://blog.zpl.pw/2014/05/12/css-hacks-you-may-not-know",
            
            
            
            "tags": ["css","coding"],
            
            "date_published": "2014-05-12T00:00:00+02:00",
            "date_modified": "2014-05-12T00:00:00+02:00",
            
                "author":  {
                "name": "zpl",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}